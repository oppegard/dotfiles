#!/bin/bash -e

function printUsage() {
  local scriptname=$(basename $0)
  echo -e "\033[32mRun tests and autocommit on green\033[0m"
  echo -e "\033[31musage: \033[1;34m$scriptname path/to/package/to/test \"Incremental Commit Comment\"\033[0m"
  echo -e "       Watches that package for changes and automatically runs tests on changes"
  echo -e "       Automatically commits when tests pass with [AutoSave] tag"
  echo -e ""
  echo -e "\033[32mDiff squash\033[0m"
  echo -e "\033[31musage: \033[1;34m$scriptname diff\033[0m"
  echo -e "       show the diff of all that you are about to squash but don't squash"
  echo -e ""
  echo -e "\033[32mUnroll commits\033[0m"
  echo -e "\033[31musage: \033[1;34m$scriptname unroll [-f]\033[0m"
  echo -e "       unroll your autocommits but do not automatically commit the squash"
  echo -e "       -f: skip linting"
}

function unroll() {
  if [[ $1 != '-f' ]]; then
    if ! git diff-index --quiet HEAD; then
      echo "Dirty Repo, aborting"
      exit 1
    fi

    echo "Linting"
    pushd "$projectdir" >/dev/null || exit 1
    golangci-lint run --out-format tab --new-from-rev $(squashHead) || exit
    popd >/dev/null || exit 1
  fi

  git reset "$(squashHead)"
}

function squashHead() {
  branch=$(git branch --show-current)
  prevCommit=$(git log --oneline "${branch}" | grep -v '\[AutoSave\]' | head -1 | awk '{print $1}')

  echo ${prevCommit}
}

function watch() {
  if [ ! -d "${testdir}" ]; then
    echo "path ${testdir} does not exist"
    exit 1
  fi

  shift
  while true; do
    fswatch -e .git/ -r1 ${testdir}
    (cd "${testdir}"; go test ./... && ${script} commit "(test-suite-passed) $*") || true
  done
}

function commit() {
  if [[ $(git status -s) == "" ]]; then
    echo "No changes"
    exit 0
  fi

  shift

  git add .
  git commit -m "[AutoSave] $*"
}

function main() {
  script="$0"
  scriptdir=$(dirname "$0")
  projectdir=$(git rev-parse --show-toplevel)
  testdir="${projectdir}/$1"

  if [[ $# -lt 1 || $1 == "-h" ]]; then
    printUsage
    exit 1
  fi

  if [[ $1 == "unroll" ]]; then
    shift
    unroll $*
  elif [[ $1 == "diff" ]]; then
    git diff "$(squashHead)"
  elif [[ $1 == "commit" ]]; then
    shift
    commit $*
  else
    watch $*
  fi
}

main $*
